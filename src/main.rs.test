use brightness::Brightness;
use futures::TryStreamExt;
use tokio::main;
use std::env;

async fn show_brightness() -> Result<(), brightness::Error> {
    brightness::brightness_devices().try_for_each(|dev| async move {
        let name = dev.device_name().await?;
        let value = dev.get().await?;
        println!("Brightness of device {} is {}%", name, value);
        Ok(())
    }).await
}

async fn set_brightness(brightness: u32) -> Result<(), brightness::Error> {
    brightness::brightness_devices().try_for_each(|mut dev| async move {
        let name = dev.device_name().await?;
        dev.set(brightness).await?;
        println!("Brightness of device {} set to {}%", name, brightness);
        Ok(())
    }).await
}

#[main]
async fn main() -> Result<(), brightness::Error> {
    let args: Vec<String> = env::args().collect();

    if args.len() < 2 {
        println!("Please provide the brightness value as an argument.");
        return Ok(());
    }
    let brightness: u32 = args[1].parse().unwrap();
    //show_brightness().await?;
    set_brightness(brightness).await?;
    Ok(())
}